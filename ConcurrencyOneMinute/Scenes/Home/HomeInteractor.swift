//
//  HomeInteractor.swift
//  ConcurrencyOneMinute
//
//  Created by Papon Supamongkonchai on 20/4/2566 BE.
//  Copyright (c) 2566 BE ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol HomeBusinessLogic
{
    func getPriceCoin(request: Home.PriceAsset.Request)
    func subscribePriceUpdate()
    func unSubscribePriceUpdate()
    func openAssetHistoryPrice()
    func openAssetCalculatorBTC(currencyRatePerBTC: CurrencyRatePerBTC)
    func savePricesInLocal(pricesListSave: [PriceDisplayModel])
}

protocol HomeDataStore
{
    var currencyRatePerBTC: CurrencyRatePerBTC? { get set }
}

class HomeInteractor: HomeBusinessLogic, HomeDataStore
{
    var presenter: HomePresentationLogic?
    var worker: HomeWorker = HomeWorker(service: HomeService())
    
    var currencyRatePerBTC: CurrencyRatePerBTC? = nil
    
    var timeUpdate = 60
    var timer: Timer? = nil
    var assetPrices: [String: Currency]? = nil
    
    // MARK: HomeBusinessLogic
    
    func getPriceCoin(request: Home.PriceAsset.Request) {
        worker.getCurrentPriceCoin { response in
            self.presenter?.presentGetPriceCoin(response: response)
        } fail: { error in
            print("Error getPriceCoin : \(error?.description)")
        }
    }
    
    func subscribePriceUpdate() {
        self.timer = Timer.scheduledTimer(withTimeInterval: 1, repeats: true) { _ in
            if self.timeUpdate <= 0 {
                self.unSubscribePriceUpdate()
                self.presenter?.presentSubscribePriceUpdate()
            } else {
                self.timeUpdate -= 1
            }
        }
    }
    
    func unSubscribePriceUpdate() {
        timer?.invalidate()
        timer = nil
        timeUpdate = 60
    }
    
    func openAssetHistoryPrice() {
        presenter?.presentOpenAssetHistoryPrice()
    }
    
    func savePricesInLocal(pricesListSave: [PriceDisplayModel]) {
        worker.savePriceDataInHistory(pricesListSave: pricesListSave) {
            self.presenter?.presentSavePricesInLocal()
        }
    }
    
    func openAssetCalculatorBTC(currencyRatePerBTC: CurrencyRatePerBTC) {
        self.currencyRatePerBTC = currencyRatePerBTC
        self.presenter?.presentOpenAssetCalculatorBTC()
    }
}
