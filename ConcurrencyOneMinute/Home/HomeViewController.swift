//
//  HomeViewController.swift
//  ConcurrencyOneMinute
//
//  Created by Papon Supamongkonchai on 20/4/2566 BE.
//  Copyright (c) 2566 BE ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol HomeDisplayLogic: AnyObject
{
    func displayGetPriceCoin(viewModel: Home.PriceAsset.ViewModel)
    func displaySubscribePriceUpdate()
}

class HomeViewController: UIViewController, HomeDisplayLogic
{
    //MARK: Property View
    @IBOutlet weak var assetPriceTableView: UITableView!
    
    //MARK: Property Control & Data
    var interactor: HomeBusinessLogic?
    var router: (NSObjectProtocol & HomeRoutingLogic & HomeDataPassing)?
    var assetPrices: [Home.PriceDisplayModel] = []
    
    //MARK: Life cycle
    override func awakeFromNib() {
        super.awakeFromNib()
        let config = HomeConfigurator()
        config.configure(viewController: self)
    }
    
    // MARK: View lifecycle
    override func viewDidLoad()
    {
        super.viewDidLoad()
        setupView()
        loadPriceCoin()
    }
    
    //MARK: View
    private func setupView() {
        //set Navigation Bar
        self.navigationItem.title = "Concerrency Price"
        self.navigationController?.navigationBar.prefersLargeTitles = true
        self.navigationItem.largeTitleDisplayMode = .always
        self.navigationController?.navigationBar.barTintColor = UIColor(hex: "6200EE")
        self.navigationController?.navigationBar.titleTextAttributes = [NSAttributedString.Key.foregroundColor: UIColor.white]
        
        assetPriceTableView.delegate = self
        assetPriceTableView.dataSource = self
    }
    
    // MARK: Function
    func loadPriceCoin() {
        let request = Home.PriceAsset.Request()
        interactor?.getPriceCoin(request: request)
    }
    
    // MARK: HomeDisplayLogic
    func displayGetPriceCoin(viewModel: Home.PriceAsset.ViewModel) {
        self.assetPrices = viewModel.pricesDisplayModel
        self.assetPriceTableView.reloadData()
        self.interactor?.subscribePriceUpdate()
    }
    
    func displaySubscribePriceUpdate() {
        loadPriceCoin()
    }
}

extension HomeViewController : UITableViewDelegate, UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return assetPrices.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "ConcerrencyPriceTableViewCell", for: indexPath) as! ConcerrencyPriceTableViewCell
        cell.configure(assetTitle: self.assetPrices[indexPath.row].nameCoin.uppercased(), assetPrice: self.assetPrices[indexPath.row].priceCoin)
        return cell
    }
}

